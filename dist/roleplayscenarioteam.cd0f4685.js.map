{"mappings":"ACCE,MAAM,SAAS,CAAC,KAEd,IAAM,EAAW,MAAM,QAAQ,GAAG,KAAK,CAGnC,EAAQ,EAAE,CAEV,MAAM,OAAO,CAAC,GAEhB,EAAQ,EACC,aAAoB,IAE7B,EAAQ,MAAM,IAAI,CAAC,EAAS,MAAM,IACzB,aAAoB,KAGpB,GAAY,AAAqC,YAArC,OAAO,CAAQ,CAAC,OAAO,QAAQ,CAAC,CAErD,EAAQ,MAAM,IAAI,CAAC,GACV,GAAY,AAAoB,UAApB,OAAO,GAE5B,CAAA,EAAQ,OAAO,MAAM,CAAC,EAAtB,EAIF,QAAQ,GAAG,CAAC,0BAA2B,GAGvC,IAAM,EAAY,SAAS,cAAc,CAAC,gBAC1C,CAAA,EAAU,SAAS,CAAG,GAGtB,EAAM,OAAO,CAAC,AAAA,IACZ,IAAM,EAAU,SAAS,aAAa,CAAC,QACvC,CAAA,EAAQ,QAAQ,CAAM,CAAA,EACtB,EAAQ,WAAW,CAAG,CAAA,EACtB,EAAQ,KAAK,CAAS,EAAK,OAAO,CAElC,EAAU,WAAW,CAAC,GAElB,EAAK,UAAU,EACjB,QAAQ,WAAW,CAAC,EAAK,UAAU,CAAE,EAEzC,EACF","sources":["<anon>","src/roleplay-team.js"],"sourcesContent":["var $f2ba213c51631206$exports = {};\n// Subscribe to store updates and render video elements for each peer\nstore.subscribe(()=>{\n    // 1) grab whatever comes back as “peers”\n    const peersRaw = store.getState().peers;\n    // 2) normalize into a real Array\n    let peers = [];\n    if (Array.isArray(peersRaw)) // already an array\n    peers = peersRaw;\n    else if (peersRaw instanceof Map) // Map<peerId, peer>\n    peers = Array.from(peersRaw.values());\n    else if (peersRaw instanceof Set) // Set<peer>\n    peers = Array.from(peersRaw);\n    else if (peersRaw && typeof peersRaw[Symbol.iterator] === 'function') // any other iterable\n    peers = Array.from(peersRaw);\n    else if (peersRaw && typeof peersRaw === 'object') // plain { peerId: peer, … }\n    peers = Object.values(peersRaw);\n    // (Optional) inspect what you got back\n    console.log('normalized peers array:', peers);\n    // 3) clear out old videos\n    const container = document.getElementById('video-section');\n    container.innerHTML = '';\n    // 4) now safely loop\n    peers.forEach((peer)=>{\n        const videoEl = document.createElement('video');\n        videoEl.autoplay = true;\n        videoEl.playsInline = true;\n        videoEl.muted = peer.isLocal;\n        container.appendChild(videoEl);\n        if (peer.videoTrack) actions.attachVideo(peer.videoTrack, videoEl);\n    });\n});\n\n\n//# sourceMappingURL=roleplayscenarioteam.cd0f4685.js.map\n","  // Subscribe to store updates and render video elements for each peer\n  store.subscribe(() => {\n    // 1) grab whatever comes back as “peers”\n    const peersRaw = store.getState().peers;\n\n    // 2) normalize into a real Array\n    let peers = [];\n\n    if (Array.isArray(peersRaw)) {\n      // already an array\n      peers = peersRaw;\n    } else if (peersRaw instanceof Map) {\n      // Map<peerId, peer>\n      peers = Array.from(peersRaw.values());\n    } else if (peersRaw instanceof Set) {\n      // Set<peer>\n      peers = Array.from(peersRaw);\n    } else if (peersRaw && typeof peersRaw[Symbol.iterator] === 'function') {\n      // any other iterable\n      peers = Array.from(peersRaw);\n    } else if (peersRaw && typeof peersRaw === 'object') {\n      // plain { peerId: peer, … }\n      peers = Object.values(peersRaw);\n    }\n\n    // (Optional) inspect what you got back\n    console.log('normalized peers array:', peers);\n\n    // 3) clear out old videos\n    const container = document.getElementById('video-section');\n    container.innerHTML = '';\n\n    // 4) now safely loop\n    peers.forEach(peer => {\n      const videoEl = document.createElement('video');\n      videoEl.autoplay    = true;\n      videoEl.playsInline = true;\n      videoEl.muted       = peer.isLocal;\n\n      container.appendChild(videoEl);\n\n      if (peer.videoTrack) {\n        actions.attachVideo(peer.videoTrack, videoEl);\n      }\n    });\n  });\n"],"names":["store","subscribe","peersRaw","getState","peers","Array","isArray","Map","from","values","Set","Symbol","iterator","Object","console","log","container","document","getElementById","innerHTML","forEach","peer","videoEl","createElement","autoplay","playsInline","muted","isLocal","appendChild","videoTrack","actions","attachVideo"],"version":3,"file":"roleplayscenarioteam.cd0f4685.js.map"}